03-2 구간 합

- 구간 합은 합 배열을 이용하여 시간 복잡도를 더 줄이기 위해 사용하는 특수한 목적의 알고리즘
- 리스트 A가 있을 때 합 배열 S는 다음과 같이 정의한다.

S[i] = A[0] + A[1] + ... + A[i-1] + A[i]

- 합 배열은 기존의 리스트 데이터를 전처리한 배열이라 생각하면 된다.
- 이렇게 합 배열을 미리 구해 놓으면 기존 리스트의 일정 범위의 합을 구하는 시간 복잡도가 O(N)에서 O(1)로 감소한다.
- 합 배열은 다음과 같은 공식으로 만들 수 있다.

S[i] = S[i-1] + A[i]

- i에서 j까지 구간 합을 구하는 공식은 다음과 같다.

S[j] - S[i-1]

- 2차원 구간 합 배열 D[X][Y] 정의

D[X][Y] = 원본 배열의 (0, 0)부터 (X, Y)까지의 사각형 영역 안에 있는 수의 합

- D[i][j]의 값을 채우는 구간 합 공식

D[i][j] = D[i][j-1] + D[i-1][j] - D[i-1][j-1] + A[i][j]

- 질의 X1, Y1, X2, Y2에 대한 답을 구간 합으로 구하는 방법

D[X2][Y2] - D[X-1][Y2] - D[X2][Y1-1] + D[X1-1][Y1-1]

✅ 나머지 합 문제 풀이의 핵심 아이디어
* (A + B) % C는 ((A % C) + (B % C)) % C와 같다. ➡️ 특정 구간 수들의 나머지 연산을 더해 나머지 연산을 한 값과 이 구간 합의 나머지 연산을 한 값은 동일하다.
* 구간 합 배열을 이용한 식 S[i] - S[j]는 원본 리스트의 j + 1부터 i까지의 구간 합이다.
* S[i] % M의 값과 S[j] % M의 값이 같다면 (S[i] - S[j]) % M은 0이다. 즉, 구간 합 배열의 원소를 M으로 나눈 나머지로 업데이트하고 S[i]와 S[j]가 같은 (i, j) 쌍을 찾으면 원본 리스트에서 i + 1부터 j까지의 구간 합이 M으로 나누어떨어진다는 것을 알 수 있다.