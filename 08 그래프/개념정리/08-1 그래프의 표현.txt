- 그래프를 표현하는 3가지 방법!

cf. 2차원 리스트 생성
A = [[0 for col in range(4)] for row in range(3)]

1. 에지 리스트(edge list)
- 에지를 중심으로 그래프를 표현
- 리스트에 출발 노드, 도착 노드를 저장하여 에지를 표현
- 또는 출발 노드, 도착 노드, 가중치를 저장하여 가중치가 있는 에지를 표현
- 구현하기 쉽다.
- 하지만 특정 노드와 관련되어 있는 에지를 탐색하기 쉽지 않음
- 노드 사이의 최단 거리를 구하는 벨만-포드나 최소 신장 트리를 찾는 크루스칼 알고리즘에 사용

2. 인접 행렬(adjacency matrix)
- 2차원 리스트를 자료구조로 이용하여 그래프를 표현
- 에지 리스트와 다르게 노드 중심으로 그래프 표현
- 구현 EASY
- 두 노드를 연결하는 에지의 여부와 가중치값은 리스트에 접근하면 바로 확인할 수 있음
- 시간 복잡도: 노드와 관련되어 있는 에지를 탐색하려면 N번 접근해야 하므로 시간 복잡도가 인접 리스트에 비해 느림
- 공간 복잡도: 노드 개수에 비해 에지가 적을 때는 공간 효율성이 떨어짐

3. 인접 리스트(adjacency list)
- 파이썬의 리스트를 이용하여 그래프를 표현
- 노드 개수만큼 리스트를 선언
- 구현이 조금 복잡한 편
- 하지만 노드와 연결된 에지를 탐색하는 시간은 매우 뛰어남
- 노드 개수가 커도 공간 효율이 좋아 메모리 초과 에러 발생 X
- 대부분의 코딩 테스트 문제에서는 인접 리스트를 이용한 그래프 구현을 선호한다.